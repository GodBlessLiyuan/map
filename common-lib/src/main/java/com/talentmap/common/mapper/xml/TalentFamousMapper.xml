<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.talentmap.common.mapper.TalentFamousMapper">
    <resultMap id="BaseResultMap" type="com.talentmap.common.pojo.TalentFamousPO">
        <id column="tfs_id" jdbcType="BIGINT" property="tfsId"/>
        <result column="tg_id" jdbcType="BIGINT" property="tgId"/>
        <result column="tf_id" jdbcType="BIGINT" property="tfId"/>
        <result column="num" jdbcType="INTEGER" property="num"/>
        <result column="isolation_id" jdbcType="BIGINT" property="isolationId"/>
    </resultMap>
    <sql id="Base_Column_List">
        tfs_id, tg_id, tf_id, num, isolation_id
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_talent_famous
        where tfs_id = #{tfsId,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from t_talent_famous
        where tfs_id = #{tfsId,jdbcType=BIGINT}
    </delete>
    <insert id="insert" parameterType="com.talentmap.common.pojo.TalentFamousPO">
        insert into t_talent_famous (tfs_id, tg_id, tf_id,
                                     num, isolation_id)
        values (#{tfsId,jdbcType=BIGINT}, #{tgId,jdbcType=BIGINT}, #{tfId,jdbcType=BIGINT},
                #{num,jdbcType=INTEGER}, #{isolationId,jdbcType=BIGINT})
    </insert>
    <insert id="insertSelective" parameterType="com.talentmap.common.pojo.TalentFamousPO">
        insert into t_talent_famous
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="tfsId != null">
                tfs_id,
            </if>
            <if test="tgId != null">
                tg_id,
            </if>
            <if test="tfId != null">
                tf_id,
            </if>
            <if test="num != null">
                num,
            </if>
            <if test="isolationId != null">
                isolation_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="tfsId != null">
                #{tfsId,jdbcType=BIGINT},
            </if>
            <if test="tgId != null">
                #{tgId,jdbcType=BIGINT},
            </if>
            <if test="tfId != null">
                #{tfId,jdbcType=BIGINT},
            </if>
            <if test="num != null">
                #{num,jdbcType=INTEGER},
            </if>
            <if test="isolationId != null">
                #{isolationId,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.talentmap.common.pojo.TalentFamousPO">
        update t_talent_famous
        <set>
            <if test="tgId != null">
                tg_id = #{tgId,jdbcType=BIGINT},
            </if>
            <if test="tfId != null">
                tf_id = #{tfId,jdbcType=BIGINT},
            </if>
            <if test="num != null">
                num = #{num,jdbcType=INTEGER},
            </if>
            <if test="isolationId != null">
                isolation_id = #{isolationId,jdbcType=BIGINT},
            </if>
        </set>
        where tfs_id = #{tfsId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.talentmap.common.pojo.TalentFamousPO">
        update t_talent_famous
        set tg_id        = #{tgId,jdbcType=BIGINT},
            tf_id        = #{tfId,jdbcType=BIGINT},
            num          = #{num,jdbcType=INTEGER},
            isolation_id = #{isolationId,jdbcType=BIGINT}
        where tfs_id = #{tfsId,jdbcType=BIGINT}
    </update>

    <delete id="deleteByTgId" parameterType="java.lang.Long">
        delete
        from t_talent_famous
        where tg_id = #{tgId,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByTfId" parameterType="java.lang.Long">
        delete
        from t_talent_famous
        where tf_id = #{tfId,jdbcType=BIGINT}
    </delete>

    <select id="findFamous" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        /*知名乡贤*/
        select
        tg.tg_id as tgId, tg.name as `name`, tg.hometown as town, n.name as nature, tg.avatar as avatar,
        tg.workunit as unit, tfs.tfs_id as id, tg.location as location, tg.position as `position`,
        tg.social_work as socialWork
        from t_talent_general as tg
        left join t_nature n on tg.nature_id = n.nature_id
        left join t_education e on tg.educ_id = e.educ_id
        left join t_talent_famous tfs on tg.tg_id = tfs.tg_id
        left join t_isolation i on tfs.isolation_id = i.isolation_id
        left join t_tag tag on i.tag_id = tag.tag_id
        where dr = 1
        and tfs.tfs_id is not null
        and i.isolation_id = #{isolationId}
        <if test="name != null and name != ''">
            and trim(replace(tg.`name`,' ','')) like trim(replace ('%' #{name,jdbcType=CHAR} '%' ,' ',''))
        </if>
        <if test="unit != null and unit != ''">
            and trim(replace(tg.`workunit`,' ','')) like trim(replace ('%' #{unit,jdbcType=CHAR} '%' ,' ',''))
        </if>
        <if test="type != null and type != 0">
            and tg.nature_id = #{type,jdbcType=INTEGER}
        </if>
        <if test="town != null and town != ''">
            and trim(replace(tg.hometown,' ','')) like trim(replace ('%' #{town,jdbcType=CHAR} '%' ,' ',''))
        </if>
        /*有头像*/
        <if test="ava==1">
            and tg.avatar is not null
        </if>
        /*没有头像*/
        <if test="ava==2">
            and tg.avatar is null
        </if>
        order by tfs.num asc
    </select>

    <select id="findByNum" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_talent_famous
        order by num
    </select>

    <select id="countNum" parameterType="java.lang.Long" resultType="java.lang.Integer">
        select count(num)
        from t_talent_famous
        where isolation_id = #{isolationId, jdbcType=BIGINT}
    </select>

    <select id="findByIsolationId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_talent_famous
        where isolation_id = #{isolationId, jdbcType=BIGINT}
        order by num
    </select>

    <select id="findOne" parameterType="java.lang.Long" resultType="java.util.HashMap">
        /*知名乡贤*/
        select tg.name        as `name`,
               tg.hometown    as town,
               n.name         as nature,
               tg.avatar      as avatar,
               tg.workunit    as unit,
               tfs.tfs_id     as id,
               tg.location    as location,
               tg.position    as `position`,
               tg.social_work as socialWork
        from t_talent_general as tg
                 left join t_nature n on tg.nature_id = n.nature_id
                 left join t_education e on tg.educ_id = e.educ_id
                 left join t_talent_famous tfs on tg.tg_id = tfs.tg_id
                 left join t_isolation i on tfs.isolation_id = i.isolation_id
                 left join t_tag tag on i.tag_id = tag.tag_id
        where dr = 1
          and tfs.tfs_id = #{tfsId, jdbcType=BIGINT}
    </select>

    <select id="findPics" parameterType="java.lang.Long" resultType="java.lang.String">
        /*知名乡贤*/
        select picture
        from t_talent_general as tg
                 left join t_talent_famous tfs on tg.tg_id = tfs.tg_id
                 left join t_general_picture gp on tg.tg_id = gp.tg_id
        where dr = 1
          and tfs.tfs_id = #{tfsId, jdbcType=BIGINT}
    </select>

    <select id="queryByIds" parameterType="java.util.List" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_talent_famous
        where tfs_id in (
        <foreach collection="list" item="tfsId" index="index" separator=",">
            #{tfsId,jdbcType=BIGINT}
        </foreach>)
    </select>

    <insert id="batchUpdate" parameterType="java.util.List">
        insert into t_talent_famous (tfs_id, tg_id, tf_id,
        num, isolation_id)
        values
        <foreach collection="list" item="po" index="index" separator=",">
            (#{po.tfsId,jdbcType=BIGINT}, #{po.tgId,jdbcType=BIGINT}, #{po.tfId,jdbcType=BIGINT},
            #{po.num,jdbcType=INTEGER},#{po.isolationId,jdbcType=BIGINT})
        </foreach>
        on duplicate key update tfs_id = values(tfs_id), num=values(num);
    </insert>
</mapper>